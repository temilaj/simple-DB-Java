package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private JoinPredicate joinPredicate;

    private DbIterator[] children;
    private ArrayList<Tuple> tuples;
    private Iterator<Tuple> tupleIterator;
    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        this.joinPredicate = p;
        this.children = new DbIterator[2];
        this.children[0] = child1;
        this.children[1] = child2;
        tuples = new ArrayList<>();
    }

    public JoinPredicate getJoinPredicate() {
        return this.joinPredicate;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        TupleDesc tupleDesc = this.children[0].getTupleDesc();
        int fieldIndex = this.joinPredicate.getField1();
        return tupleDesc.getFieldName(fieldIndex);
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        TupleDesc tupleDesc = this.children[1].getTupleDesc();
        int fieldIndex = this.joinPredicate.getField2();
        return tupleDesc.getFieldName(fieldIndex);
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        TupleDesc tupleDesc1 = this.children[0].getTupleDesc();
        TupleDesc tupleDesc2 = this.children[1].getTupleDesc();
        return TupleDesc.merge(tupleDesc1, tupleDesc2);
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        super.open();
        for (DbIterator child : children)
        {
            child.open();
        }

        DbIterator child1 = children[0];
        DbIterator child2 = children[1];

        while (child1.hasNext())
        {
            Tuple firstTuple = child1.next();
            while (child2.hasNext())
            {
                Tuple secondTuple = child2.next();
                if(this.joinPredicate.filter(firstTuple, secondTuple))
                {
                    int index = 0;
                    Tuple newTuple = new Tuple(this.getTupleDesc());
                    // create a new Tuple by concatenating the first and second tuples
                    for (int i = 0; i < firstTuple.getTupleDesc().numFields(); i++)
                    {
                        newTuple.setField(index, firstTuple.getField(i));
                        index += 1;
                    }
                    for (int i = 0; i < secondTuple.getTupleDesc().numFields(); i++)
                    {
                        newTuple.setField(index, secondTuple.getField(i));
                        index += 1;

                    }
                    this.tuples.add(newTuple);
                }
            }
            children[1].rewind();
        }
        this.tupleIterator = this.tuples.iterator();

    }

    public void close() {
        for (DbIterator child : children)
        {
            child.close();
        }
       super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        this.tupleIterator = this.tuples.iterator();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        if (this.tupleIterator == null || !this.tupleIterator.hasNext())
        {
            return null;
        }
        else
        {
            return this.tupleIterator.next();
        }
    }

    @Override
    public DbIterator[] getChildren() {
        return this.children;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        this.children = children;
    }

}
